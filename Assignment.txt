// Function to check if a string is a palindrome
fn is_palindrome(s: &str) -> bool {
    s.chars().eq(s.chars().rev())
}

// Function to return the index of the first occurrence of a given number in a sorted array
fn first_occurrence(arr: &[i32], target: i32) -> Option<usize> {
    arr.iter().position(|&x| x == target)
}

// Function to return the shortest word in a string of words
fn shortest_word(s: &str) -> Option<&str> {
    s.split_whitespace().min_by_key(|word| word.len())
}

// Function to check if a number is prime
fn is_prime(n: u64) -> bool {
    if n <= 1 {
        return false;
    }
    for i in 2..=(n as f64).sqrt() as u64 {
        if n % i == 0 {
            return false;
        }
    }
    true
}

// Function to return the median of a sorted array of integers
fn median(arr: &[i32]) -> f64 {
    let len = arr.len();
    if len % 2 == 0 {
        (arr[len / 2 - 1] + arr[len / 2]) as f64 / 2.0
    } else {
        arr[len / 2] as f64
    }
}

// Function to find the longest common prefix of a given set of strings
fn longest_common_prefix(strings: &[String]) -> String {
    if strings.is_empty() {
        return String::new();
    }
    let min_len = strings.iter().map(|s| s.len()).min().unwrap();
    let mut result = String::new();
    'outer: for i in 0..min_len {
        let c = strings[0].as_bytes()[i];
        for s in strings.iter().skip(1) {
            if s.as_bytes()[i] != c {
                break 'outer;
            }
        }
        result.push(c as char);
    }
    result
}

// Function to return the kth smallest element in a given array
fn kth_smallest(arr: &[i32], k: usize) -> Option<i32> {
    arr.iter().cloned().nth(k - 1)
}

// Definition of a binary tree node
#[derive(Debug)]
struct TreeNode {
    val: i32,
    left: Option<Box<TreeNode>>,
    right: Option<Box<TreeNode>>,
}

// Function to return the maximum depth of a binary tree
fn max_depth(root: Option<&Box<TreeNode>>) -> i32 {
    match root {
        Some(node) => 1 + std::cmp::max(max_depth(node.left.as_deref()), max_depth(node.right.as_deref())),
        None => 0,
    }
}

// Function to reverse a string
fn reverse_string(s: &str) -> String {
    s.chars().rev().collect()
}

// Function to check if a number is prime
fn is_prime_rust(n: u64) -> bool {
    if n <= 1 {
        return false;
    }
    for i in 2..=n / 2 {
        if n % i == 0 {
            return false;
        }
    }
    true
}

// Function to merge two sorted arrays
fn merge_sorted_arrays(arr1: &[i32], arr2: &[i32]) -> Vec<i32> {
    let mut merged = Vec::with_capacity(arr1.len() + arr2.len());
    let mut i = 0;
    let mut j = 0;
    while i < arr1.len() && j < arr2.len() {
        if arr1[i] < arr2[j] {
            merged.push(arr1[i]);
            i += 1;
        } else {
            merged.push(arr2[j]);
            j += 1;
        }
    }
    merged.extend_from_slice(&arr1[i..]);
    merged.extend_from_slice(&arr2[j..]);
    merged
}

// Function to find the maximum subarray sum
fn max_subarray_sum(arr: &[i32]) -> i32 {
    let mut max_sum = arr[0];
    let mut current_sum = arr[0];
    for &num in arr.iter().skip(1) {
        current_sum = current_sum.max(0) + num;
        max_sum = max_sum.max(current_sum);
    }
    max_sum
}

fn main() {
    // Testing the implemented functions
    println!("Is 'racecar' a palindrome? {}", is_palindrome("racecar"));
    println!("First occurrence of 3 in [1, 2, 3, 4, 5]: {:?}", first_occurrence(&[1, 2, 3, 4, 5], 3));
    println!("Shortest word in 'apple banana cherry': {:?}", shortest_word("apple banana cherry"));
    println!("Is 17 prime? {}", is_prime(17));
    println!("Median of [1, 3, 5, 7, 9]: {}", median(&[1, 3, 5, 7, 9]));
    println!("Longest common prefix of ['flower', 'flow', 'flight']: {:?}", longest_common_prefix(&vec!["flower".to_string(), "flow".to_string(), "flight".to_string()]));
    println!("3rd smallest element in [1, 2, 3, 4, 5]: {:?}", kth_smallest(&[1, 2, 3, 4, 5], 3));
    
    // Example binary tree
    let tree = Some(Box::new(TreeNode {
        val: 1,
        left: Some(Box::new(TreeNode {
            val: 2,
            left: None,
            right: None,
        })),
        right: Some(Box::new(TreeNode {
            val: 3,
            left: None,
            right: Some(Box::new(TreeNode {
                val: 4,
                left: None,
                right: None,
            })),
        })),
    }));
    println!("Maximum depth of the binary tree: {}", max_depth(tree.as_ref()));

    println!("Reverse of 'hello': {}", reverse_string("hello"));
    println!("Is 11 prime? {}", is_prime_rust(11));

    let arr1 = [1, 3, 5, 7, 9];
    let arr2 = [2, 4, 6, 8, 10];
    println!("Merged sorted arrays: {:?}", merge_sorted_arrays(&arr1, &arr2));

    let arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4];
    println!("Maximum subarray sum: {}", max_subarray_sum(&arr));
}
